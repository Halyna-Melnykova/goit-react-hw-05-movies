{"version":3,"file":"static/js/247.c192b205.chunk.js","mappings":"4TAEMA,EAAWC,IAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAW,mCAAG,sGACFL,EAASM,IAAI,uBADX,uBACjBC,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,qDAKXC,EAAY,mCAAG,WAAMC,GAAN,yFACHT,EAASM,IAAT,iBAAuBG,IADpB,uBAClBF,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZG,EAAS,mCAAG,WAAMD,GAAN,yFACAT,EAASM,IAAT,gBAAsBG,EAAtB,aADA,uBACfF,EADe,EACfA,KADe,kBAEhBA,GAFgB,2CAAH,sDAKTI,EAAU,mCAAG,WAAMF,GAAN,yFACDT,EAASM,IAAT,gBAAsBG,EAAtB,aADC,uBAChBF,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,sDASVK,EAAe,mCAAG,WAAMC,GAAN,yFACNZ,IAAAA,IAAA,UAJR,gCAIQ,gCAHb,mCAGa,kBAC2BY,EAD3B,oBADM,uBACrBN,EADqB,EACrBA,KADqB,kBAItBA,GAJsB,2CAAH,qD,+GCoB5B,UAjDa,WACX,OAA4BO,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQX,GAAYY,EAAAA,EAAAA,MAAZZ,QAkBR,OAhBAa,EAAAA,EAAAA,YAAU,WAAM,wCACd,2FACEJ,GAAW,GADb,mBAGuBR,EAAAA,EAAAA,IAAUD,GAHjC,OAGUF,EAHV,OAIIS,EAAUT,EAAKgB,MAJnB,gDAMIH,EAAS,EAAD,IANZ,yBAQIF,GAAW,GARf,6EADc,uBAAC,WAAD,wBAYdM,EAED,GAAE,CAACf,KAGF,2BACGQ,IAAW,sCACXE,IAAS,kCACV,wBACGJ,GACCA,EAAOU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACT,2BACE,gBACEC,UAAU,QACVC,IACEF,EAAY,6CAC8BA,GAD9B,iKAIdG,IAAI,WAEN,uBAAIL,KACJ,uCAAeC,OAXRF,EADA,QAkBpB,C","sources":["api/movies.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '163c321dbb11d99503a707d857a1af3f',\n  },\n});\n\nexport const getTrending = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n  return data;\n};\n\nexport const getMovieInfo = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}`);\n  return data;\n};\n\nexport const getActors = async movieId => {\n  const { data } = await instance.get(`movie/${movieId}/credits`);\n  return data;\n};\n\nexport const getReviews = async movieId => {\n  const { data } = await instance.get(`movie/${movieId}/reviews`);\n  return data;\n};\n\n// search\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = '163c321dbb11d99503a707d857a1af3f';\n\nexport const getMovieByQuery = async query => {\n  const { data } = await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY}&query=${query}&language=en-US`\n  );\n  return data;\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getActors } from '../../api/movies';\n\nconst Cast = () => {\n  const [actors, setActors] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchActors() {\n      setLoading(true);\n      try {\n        const data = await getActors(movieId);\n        setActors(data.cast);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchActors();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && <p>Loading...</p>}\n      {error && <p>Erorr</p>}\n      <ul>\n        {actors &&\n          actors.map(({ id, name, character, profile_path }) => (\n            <li key={id}>\n              <img\n                className=\"image\"\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/original${profile_path}`\n                    : `https://images.unsplash.com/photo-1597848212624-a19eb35e2651?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1935&q=80`\n                }\n                alt=\"actor\"\n              />\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["instance","axios","baseURL","params","api_key","getTrending","get","data","getMovieInfo","movieId","getActors","getReviews","getMovieByQuery","query","useState","actors","setActors","loading","setLoading","error","setError","useParams","useEffect","cast","fetchActors","map","id","name","character","profile_path","className","src","alt"],"sourceRoot":""}